import BaseObject, { BaseConfig } from './BaseObject'
import { Application, Container, Sprite } from 'pixi.js'
import createFilter from '../Filter'
import { Rect } from '../types'

export interface BaseRenderConfig extends BaseConfig {
  app: Application
  parent: Container
  filter?: {
    glsl: string
  }
  crop?: Rect
}

export default abstract class BaseRenderObject<Config extends BaseRenderConfig> extends BaseObject<Config> {
  sprite?: Sprite

  protected _transitionCount = 0

  protected _container!: Container

  protected get _filterTargetContainer() {
    return this._container
  }

  protected _addFilters() {
    const { filter } = this.config
    if (!filter) return

    this._filterTargetContainer.filters = [
      createFilter(filter.glsl),
    ]
  }

  protected _init() {
    const container = this._createRenderContainer()
    container.visible = false
    this.config.parent.addChild(container)
    this._container = container

    this._addFilters()
  }

  protected _createRenderContainer(): Container {
    return new Container()
  }

  set active(active: boolean) {
    super.active = active
    this._checkToogleVisible()
  }

  get active() {
    return this._active
  }

  set transitionCount(n: number) {
    this._transitionCount = n
    this._checkToogleVisible()
  }

  get transitionCount() {
    return this._transitionCount
  }

  private _checkToogleVisible() {
    if (!this.transitionCount && this.active) {
      this._show()
    } else {
      this._hide()
    }
  }

  protected _show() {
    this._container!.visible = true
  }

  protected _hide() {
    this._container!.visible = false
  }

  protected _onload() {
    // 更新滤镜的 width 和 height 两个 uniform
    const filterTarget = this._filterTargetContainer
    const { filters } = filterTarget

    filters && filters.forEach(filter => {
      filter.uniforms.width = filterTarget.width
      filter.uniforms.height = filterTarget.height
    })
  }

  protected _destroy() {
    this.config.parent.removeChild(this._container)
  }

  protected _render(offsetTime: number, force: boolean) {
    const { filters } = this._filterTargetContainer
    filters && filters.forEach(filter => {
      filter.uniforms.time = offsetTime
    })
  }
}
