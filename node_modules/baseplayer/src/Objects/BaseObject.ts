import EE from 'eventemitter3'
import BasePlayer from '../BasePlayer'

export interface BaseConfig {
  id?: number | string
  player: BasePlayer
  startTime: number
  duration: number
}

export default class BaseObject<Config extends BaseConfig = BaseConfig> extends EE {
  protected _active = false

  constructor(public config: Config) {
    super()

    this._init()
  }

  set active(active: boolean) {
    this._active = active
  }

  get active() {
    return this._active
  }

  /**
   * 传入一个时间，判断元素是否是 active 的
   * @param time
   */
  public isActive(time: number) {
    const { startTime, duration } = this.config
    return time >= startTime && time < startTime + duration
  }

  /**
   * 同步时间
   * @param time
   * @param force
   */
  public sync(time: number, force = false) {
    const { startTime } = this.config
    const { active } = this

    const isActive = this.isActive(time)
    const inactive2active = !active && isActive
    const active2inactive = active && !isActive

    if (isActive) {
      this._render(time - startTime, force || inactive2active)
    }

    // unactive -> active
    if (inactive2active) {
      this._onActive()
      this.active = isActive
    }

    // active -> unactive
    if (active2inactive) {
      this._onInactive()
      this.active = isActive
    }
  }

  public destroy() {
    this._destroy()
  }

  protected _init() {/* */}

  protected _destroy() {/* */}

  protected _onActive() {/* */}

  protected _onInactive() {/* */}

  protected _render(offsetTime: number, force = false) {/* */}
}
