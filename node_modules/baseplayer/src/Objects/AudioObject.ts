import BaseObject, { BaseConfig } from './BaseObject'

export interface AudioConfig extends BaseConfig {
  src: string
  fade?: boolean
}

export default class AudioObject extends BaseObject<AudioConfig> {
  audio!: HTMLAudioElement

  protected _init() {
    const audio = document.createElement('audio')
    audio.src = this.config.src
    audio.loop = true
    this.audio = audio
  }

  _render(offsetTime: number, force: boolean) {
    super._render(offsetTime, force)

    const { player, duration, fade } = this.config
    const { audio } = this

    if (force) {
      const totalDuration = audio.duration
      // 音频循环播放
      audio.currentTime = totalDuration ? (offsetTime % totalDuration) : offsetTime
    }

    // 音频淡入淡出
    if (fade) {
      const toBoundary = Math.min(offsetTime, duration - offsetTime)
      if (toBoundary < 0.5) {
        audio.volume = toBoundary / 0.5
      } else {
        audio.volume = 1
      }
    }

    if (player.paused && !audio.paused) {
      audio.pause()
    }

    if (!player.paused && audio.paused) {
      audio.play()
    }
  }

  _onInactive() {
    super._onInactive()
    this.audio.pause()
  }

  _destroy() {
    super._destroy()
    this.audio.pause()
  }
}
