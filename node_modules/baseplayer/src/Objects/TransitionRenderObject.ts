import BaseRenderObject, { BaseRenderConfig } from './BaseRenderObject'
import Transition from '../Transition'
import VideoRenderObject from './VideoRenderObject'

interface TransitionRenderConfig extends BaseRenderConfig {
  from: BaseRenderObject<any>
  to: BaseRenderObject<any>
  duration: number
  transitionGLSL: string
}

export default class TransitionRenderObject extends BaseRenderObject<TransitionRenderConfig> {
  transition?: Transition

  _createRenderContainer() {
    const { app, from, to, transitionGLSL } = this.config

    const transition = this.transition = new Transition(
      {
        width: app.screen.width,
        height: app.screen.height,
        resizeMode: 'contain',
      },
      from.sprite!,
      to.sprite!,
      {
        transitionGLSL,
      },
    )

    return transition.container
  }

  _onActive() {
    super._onActive()

    this.config.from.transitionCount++
    this.config.to.transitionCount++
  }

  _onInactive() {
    super._onInactive()

    this.config.from.transitionCount--
    this.config.to.transitionCount--
  }

  _render(offsetTime: number) {
    const transition = this.transition!
    const { duration, from, to } = this.config
    const progress = offsetTime / duration
    transition.progress = progress

    if (progress < 0.5 && to instanceof VideoRenderObject) {
      to.seekToTime(0)
    }

    if (progress > 0.5 && from instanceof VideoRenderObject) {
      from.seekToTime(from.config.duration)
    }

    if (from instanceof VideoRenderObject) {
      from.sprite.texture.update()
    }

    if (to instanceof VideoRenderObject) {
      to.sprite.texture.update()
    }

    transition.renderTextures(this.config.app.renderer as PIXI.WebGLRenderer)
  }
}
