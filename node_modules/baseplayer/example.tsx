// tslint:disable
import { render } from 'react-dom'
import React, { PureComponent } from 'react'
import BasePlayer, { VideoData } from './src/BasePlayer'

const transitionGLSL = `
  const float reflection = 0.4;
  const float perspective = 0.4;
  const float depth = 3.0;

  const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
  const vec2 boundMin = vec2(0.0, 0.0);
  const vec2 boundMax = vec2(1.0, 1.0);

  bool inBounds (vec2 p) {
    return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));
  }

  vec2 project (vec2 p) {
    return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);
  }

  vec4 bgColor (vec2 p, vec2 pto) {
    vec4 c = black;
    pto = project(pto);
    if (inBounds(pto)) {
      c += mix(black, getToColor(pto), reflection * mix(1.0, 0.0, pto.y));
    }
    return c;
  }

  vec4 transition (vec2 p) {
    vec2 pfr = vec2(-1.), pto = vec2(-1.);
    float middleSlit = 2.0 * abs(p.x-0.5) - progress;
    if (middleSlit > 0.0) {
      pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);
      float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));
      pfr.y -= d/2.;
      pfr.y *= d;
      pfr.y += d/2.;
    }
    float size = mix(1.0, depth, 1.-progress);
    pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);
    if (inBounds(pfr)) {
      return getFromColor(pfr);
    }
    else if (inBounds(pto)) {
      return getToColor(pto);
    }
    else {
      return bgColor(p, pto);
    }
  }
`

interface State {
  currentTime: number
  paused: boolean
  inited: boolean
  imageSrc: string
}

const videoData: VideoData = {
  mainline: [
    {
      id: 'd0',
      type: 'video',
      src: 'http://idst-video-img.oss-cn-hangzhou.aliyuncs.com/video/20190218/mb5e0dcde-1f5d-53ce-bddd-792e915e0bf2.mp4',
      seek: 7,
      duration: 10,
      crop: {
        x: 10,
        y: 10,
        width: 50,
        height: 50,
      },
    },
    {
      id: 'v2',
      type: 'transition',
      duration: 1.5,
      glsl: transitionGLSL,
    },
    {
      id: 'v1',
      type: 'video',
      src: 'http://idst-video-img.oss-cn-hangzhou.aliyuncs.com/video/20190218/c39456fab0b4417891387db627d1c6d2.mp4',
      seek: 5,
      duration: 5,
    },
    {
      id: 'v2',
      type: 'transition',
      duration: 4,
      glsl: transitionGLSL,
    },
    {
      id: 'd1',
      type: 'video',
      src: 'http://idst-video-img.oss-cn-hangzhou.aliyuncs.com/video/20190218/c39456fab0b4417891387db627d1c6d2.mp4',
      seek: 0,
      duration: 10
    },
  ],
  audios: [
    {
      id: 'a1',
      type: 'audio',
      src: 'https://mgc-video-store.oss-cn-hangzhou.aliyuncs.com/mgc-addons/subtitle/music/v3/1-3.m4a',
      startTime: 3,
      duration: 10,
      fade: true,
    },

    {
      id: 'a1',
      type: 'audio',
      src: 'https://mgc-video-store.oss-cn-hangzhou.aliyuncs.com/mgc-addons/bgm/f01-02.m4a',
      startTime: 15,
      duration: 8,
      fade: true,
    },
  ],
}

class Example extends PureComponent<{}, State> {
  player?: BasePlayer
  canvas!: HTMLCanvasElement

  _time = 0

  state = {
    currentTime: 0,
    paused: true,
    inited: false,
    imageSrc: '',
  }

  refCanvas = (el: HTMLCanvasElement) => {
    this.canvas = el
  }

  init = () => {
    const player = new BasePlayer({
      canvas: this.canvas,
      width: 1280,
      height: 720,
      FPS: 60,
      data: videoData,
      preserveDrawingBuffer: true,
    })

    player.kawaseList = [{
      filterName: '',
      startTime: 0,
      duration: 1000,
      x: 100,
      y: 400,
      height: 200,
      width: 300,
    }]

    player.on('timeupdate', (time: number) => {
      this._time = time
      this.setState({
        currentTime: time,
      })
    })

    player.on('paused', e => {
      this.setState({
        paused: true,
      })
    })

    player.on('ended', () => {
      this.setState({
        currentTime: 0,
      })
    })

    this.player = player

    this.setState({
      inited: true,
    })
  }

  destroy = () => {
    this.player!.destory()
    this.player = undefined
    this.setState({
      inited: false,
    })
  }

  play = () => {
    this.setState({
      paused: false,
    })
  }

  pause = () => {
    this.setState({
      paused: true,
    })
  }

  reInitData = () => {
    this.player!.setData(videoData)
  }

  handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target
    const { player } = this
    if (player) {
      this.setState({
        currentTime: Number(value) * player!.duration,
      })
    }
  }

  createKawaseFilters = () => {
    this.player!.kawaseList = [0, 0, 0, 0, 0, 0, 0, 0].map(x => {
      return {
        filterName: 'kawase',
        startTime: Math.random() * 30,
        duration: Math.random() * 30,
        x: Math.random() * 500,
        y: Math.random() * 500,
        width: Math.random() * 500,
        height: Math.random() * 500,
      }
    })
  }

  snapshot = () => {
    const image = this.player!.snapshot()
    this.setState({
      imageSrc: image,
    })
  }

  componentDidUpdate(prevProps: any, prevState: State) {
    const { player } = this
    const { currentTime, paused } = this.state
    if (currentTime !== this._time && player) {
      player.currentTime = currentTime
    }

    if (paused !== prevState.paused && player) {
      if (paused) {
        player.pause()
      } else {
        player.play()
      }
    }
  }

  render() {
    const { paused, currentTime, inited, imageSrc } = this.state
    const { player } = this
    const duration = player ? player.duration : 0

    return (
      <div>
        <canvas
          ref={this.refCanvas}
          style={{
            width: 600,
            display: 'block',
          }}
        />
        <div>
          {
            inited ?
              <span>
                <button onClick={this.destroy}>销毁播放器</button>
                <button onClick={this.reInitData}>更新数据</button>
                {
                  paused ? (
                    <button onClick={this.play}>播放</button>
                  ) : (
                    <button onClick={this.pause}>暂停</button>
                  )
                }
                <button onClick={this.createKawaseFilters}>随机生成马赛克</button>
                <button onClick={this.snapshot}>截图</button>
              </span>
            : <button onClick={this.init}>初始化播放器</button>
          }
        </div>

        <input
          type='range'
          min={0}
          max={1}
          step={0.001}
          value={duration ? (currentTime / duration) : 0}
          onChange={this.handleSliderChange}
          style={{
            width: 600,
          }}
        />
        {
          imageSrc ?
            <img style={{ width: 480, height: 270 }} src={imageSrc} />
          : null
        }
      </div>
    )
  }
}

render(<Example />, document.getElementById('app'))
